#!/usr/bin/env python
#
# Simple script for "proofreading" a LaTeX file.
#
# Anders Logg, 2010-12-16

import sys
from utils import *

# FIXME: Add check for . at end of paragraph but not in subsection and section

# List of things to check
checklist = [("i.e.",                 "'; that is,'"),
             (", that is,",           "; that is,"),
             ("\\cite{",              "\\citet{} or \\citep{}"),
             ("multiindex",           "multi-index"),
             ("multi index",          "multi-index"),
             ("non-zero",             "nonzero"),
             ("the the",              "the"),
             (" * ",                  "*"),
             ("tool chain",           "toolchain"),
             ("tool-chain",           "toolchain"),
             ("time-series",          "time series"),
             ("PyDOLFIN",             "DOLFIN"),
             ("editornote",           "fix!"),
             ("authornote",           "fix!"),
             ("displaymath",          "equation"),
             ("equation*",            "equation"),
             ("align*",               "align"),
             ("eqnarray*",            "multline, split or align"),
             ("eqnarray",             "multline, split or align"),
             ("\\forall ",            "\\foralls"),
             ("\\forall\\",           "\\foralls"),
             ("\\geq ",               "\\geqslant"),
             ("\\geq\\",              "\\geqslant"),
             ("\\geq\n",              "\\geqslant"),
             ("\\leq ",               "\\leqslant"),
             ("\\leq\\",              "\\leqslant"),
             ("\\leq\n",              "\\leqslant"),
             ("\\mathcal{T} ",        "\\mathcal{T}_h"),
             ("\\mathcal{T}\\",       "\\mathcal{T}_h"),
             ("commandline",          "command-line"),
             ("command line",         "command-line"),
             (" Nedelec",             "\\nedelec{}"),
             ("etc ",                 "etc."),
             ("etc, ",                "etc.,"),
             ("cf.",                  "see"),
             ("fig.",                 "Figure"),
             ("Fig.",                 "Figure"),
             ("Sec.",                 "Section"),
             ("eq.",                  "\eqref"),
             ("Eq.",                  "\eqref"),
             ("^t",                   "^{\\top}"),
             ("^T",                   "^{\\top}"),
             ("(\ref{",               "\eqref{}"),
             ("\\begin{code}",        "\begin{python/c++/bash}"),
             (" sub ",                "subfoo"),
             ("sub-",                 "subfoo"),
             ("Burger's",             "Burgers'"),
             ("Navier-Stokes",        "Navier--Stokes"),
             ("Runge-Kutta",          "Runge--Kutta"),
             ("Raviart-Thomas",       "Raviart--Thomas"),
             ("Brezzi-Douglas",       "Brezzi--Douglas"),
             ("Crouzeix-Raviart",     "Crouzeix--Raviart"),
             ("Crank-Nicolson",       "Crank--Nicolson"),
             ("fluid-structure",      "fluid--structure"),
             ("Fluid-structure",      "Fluid--structure"),
             ("streamline-diffusion", "streamline--diffusion"),
             ("Streamline-diffusion", "Streamline--diffusion"),
             ("\\nabla u \\cdot u",   "\\nabla u \, u"),
             ("d\Omega",              "\\dx"),
             (" dx",                  "\\dx"),
             (" ds",                  "\\ds"),
             ("\,  dx",               "\\dx"),
             ("\,ds",                 "\\ds"),
             ("$ conforming",         "$-conforming"),
             ("H(div)",               "$\Hdiv$"),
             ("H(curl)",              "$\Hcurl$"),
             ("right hand",           "right-hand"),
             ("left hand",            "left-hand"),
             ("runtime",              "run-time"),
             ("run time",             "run-time"),
             ("compiletime",          "compile-time"),
             ("compile time",         "compile-time"),
             ("non uniform",          "non-uniform"),
             ("non-linear",           "nonlinear"),
             (" chapter",             "Chapter"),
             (" figure",              "Figure"),
             (" table",               "Table"),
             ("long term",            "long-term"),
             ("L_2",                  "L^2"),
             ("a posteriori",         "\\apost"),
             ("a priori",             "\\apriori"),
             ("acknowledgement",      "acknowledgment")]

# List of words that are allowed to be uppercase in titles
uppercase = ["A",
             "Argyris",
             "Landweber",
             "Laplacian",
             "FEniCS",
             "Lagrange",
             "Crouzeix--Raviart",
             "Raviart--Thomas",
             "Brezzi--Douglas--Marini",
             "Mardal-Tai-Winther",
             "Arnold--Winther",
             "Hermite",
             "Morley",
             "FFC",
             "Navier--Stokes",
             "FErari",
             "Python",
             "UFL",
             "Galerkin",
             "Circle",
             "Willis",
             "PC",
             "MRA",
             "PDEs",
             "Neumann",
             "Poisson",
             "Poisson's",
             "Stokes",
             "Hodge",
             "UFC",
             "XML",
             "DOLFIN",
             "C++/Python",
             "I/O",
             "VTK",
             "Dirichlet",
             "Neumann",
             "Robin",
             "Neumann,",
             "Robin,",
             "Newton",
             "PDE",
             "Poisson-like",
             "Instant",
             "API",
             "C/C++",
             "OpenMP",
             "Orr--Sommerfeld",
             "Gmsh",
             "SAS",
             "Scott--Vogelius",
             "Swiginac",
             "SFC",
             "SFC:",
             "SyFi",
             "Re",
             "ALE",
             "SciPy",
             "Boussinesq",
             "Gaussian",
             "SWIG",
             "Lagrangian",
             "FSI",
             "Earth's",
             "TimeDependentPDE",
             "ErrorEstimate",
             "SpaceTimeFunction",
             "SlipBC",
             "ElasticSmoother",
             "MeshAdaptInterface",
             "MAdLib"]

# List of code environments
code_environments = [("\\begin{python}",   "\\end{python}"),
                     ("\\begin{c++}",      "\\end{c++}"),
                     ("\\begin{uflcode}",  "\\end{uflcode}"),
                     ("\\begin{swigcode}", "\\end{swigcode}")]

def check_capitalization(text):
    warnings = []
    for (i, line) in enumerate(text.split("\n")):
        for section in ("section", "paragraph", "fenicschapter"):
            if ("%s{" % section) in line:
                line = line.split("%s{" % section)[1]
                line = "".join(line.split("}")[:-1])
                for word in line.split(" ")[1:]:
                    if len(word) > 0 and word[0].isupper() and not word in uppercase:
                        warnings.append("Capitalized word '%s' in section: %s" % (word, line))
    return warnings

def check_all(text):
    "Check stuff"

    warnings = []

    # Checks performed before stripping
    warnings += check_capitalization(text)

    # Remove newlines, whitespaces etc
    text = strip_text(text)

    # Check simple replacements
    for (a, b) in checklist:

        # Find all occurences of a
        offset = 0
        while True:
            pos = text[offset:].find(a)
            if pos != -1:
                if inside_code_environment(offset + pos, text):
                    warnings += ["%s --> %s (but inside code environment so IGNORE)" % (a, b)]
                else:
                    warnings += ["%s --> %s" % (a, b)]
                offset += pos + 1
            else:
                break

        #if a in text:
        #    warnings += ["%s --> %s" % (a, b)]

    # I like this line
    warnings = [warning for warning in warnings if warning is not None]

    return warnings

def strip_text(text):
    "Remove newlines, whitespaces etc"
    text = text.replace("\n", " ")
    text = text.replace("\t", " ")
    while True:
        new_text = text.replace("  ", " ")
        if len(new_text) == len(text):
            break
        text = new_text
    return text

def inside_code_environment(pos, text):
    "Check whether text position is inside code environment"

    for b, e in code_environments:

        # Find positions of preceding begin/end
        b0, b1 = text[pos:0:-1].find(b[::-1]), text[pos:0:-1].find(e[::-1])

        # Find positions of succeeding end/begin
        e0, e1 = text[pos:].find(e), text[pos:].find(b)

        # Check
        if (b0 != -1 and (b0 < b1 or b1 == -1)) and (e0 != -1 and (e0 < e1 or e1 == -1)):
            return True

    return False

if __name__ == "__main__":

    # Get file name
    if not len(sys.argv) == 2:
        print "Usage: proofread file.tex"
        sys.exit(1)
    filename = sys.argv[1]

    # Open file and read text
    try:
        file = open(filename)
        text = file.read()
        file.close()
    except:
        print "Unable to open file '%s'." % filename
        sys.exit(1)

    # Check stuff
    warnings = check_all(text)

    # Print results
    if len(warnings) == 0:
        s = "%s: OK" % filename
        print s + "\n" + "-"*len(s)
    else:
        s = "%s: %d warning(s)" % (filename, len(warnings))
        print s + "\n" + "-"*len(s)
        for warning in warnings:
            print "- " + warning
